@page "/applicants/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3>Profile</h3>

<div class="row col-12">
    
    <div class="col-4">
        <img src="@ProfilePicDataUrl" style="width: 250px; height: 250px"> <br/> <br/>
        <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </div>

    <div class="col-8">
        <a href="/applicants/create" class="btn btn-secondary">
        <span class="oi oi-plus"></span>
        Add Name & Contact Number
    </a>
    @*<br />
    <br />*@

    </div>

</div>




@if (Applicants == null)
{
    <div class="alert alert-info">Loading Applicants</div>
}
else
{
    
    <table class ="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>ContactNumber</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var applicant in Applicants)
            {
                <tr>
                    @*<td>@applicant.Id</td>*@<td>@applicant.Name</td><td>@applicant.ContactNumber</td> 
                    <td>
                        <a href="/applicants/view/@applicant.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>    
                        </a>
                        <a href="/applicants/edit/@applicant.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>    
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(applicant.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
   
}

@code {
    private List<Applicant> Applicants;

    protected async override Task OnInitializedAsync()
    {
        Applicants = await _client.GetFromJsonAsync<List<Applicant>>($"{Endpoints.ApplicantsEndpoint}");
    }

    async Task Delete(int applicantId)
    {
        var applicant = Applicants.First(q => q.Id == applicantId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {applicant.ContactNumber}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ApplicantsEndpoint}/{applicantId}");
            await OnInitializedAsync();
        }
    }

    // Setting up The Profile Picture

    public string ProfilePicDataUrl { get; set; }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        // Let us Get The file
        var file = inputFileChangeEvent.File;

        // We Are Going to readd said file into a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        // Then It Is Going To be Converted To a vyte array as base 64 string 
        ProfilePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

}
